import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
import matplotlib.pyplot as plt
import tensorflow_datasets as tfds

(ds_train, ds_test), ds_info = tfds.load(
    'cats_vs_dogs',
    split=['train[:80%]', 'train[80%:]'],
    with_info=True,
    as_supervised=True,
)

def preprocess(image, label):
    image = tf.image.resize(image, (128, 128))
    image = image / 255.0
    return image, label

ds_train = ds_train.map(preprocess).batch(32).prefetch(tf.data.experimental.AUTOTUNE)
ds_test = ds_test.map(preprocess).batch(32).prefetch(tf.data.experimental.AUTOTUNE)

for image, label in ds_train.take(1):
    plt.imshow(image[0])
    plt.show()
    print("Label:", "Cat" if label[0] == 0 else "Dog")

model = Sequential()
model.add(Flatten(input_shape=(128, 128, 3)))
model.add(Dense(256, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.summary()

model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['accuracy'])

history = model.fit(ds_train, epochs=18, validation_data=ds_test)

plt.figure()
plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.legend()

for image, label in ds_test.take(1):
    plt.imshow(image[0])
    plt.show()
    prediction = model.predict(image[0].numpy().reshape(1, 128, 128, 3)).argmax(axis=1)
    print("Predicted class:", "Cat" if prediction[0] == 0 else "Dog")
    print("True class:", "Cat" if label[0] == 0 else "Dog")
